import argparse
import pathlib


class Structure:
    ext = 'py'
    mod = 'core'

    def __init__(self, path: pathlib.Path, arg_name: str):
        self.path = path
        self.keys = ('manage', 'settings', arg_name.replace('-',
                                                            '_'), '__init__')

        self.content = (f'''# Do not edit this file
# This file was automatically generated by Sockets Framework
import argparse
from core import {self.keys[2]}
from sockets_framework.core import Server
from core.settings import LISTEN_ADDRESS, AUTHKEY
if isinstance(AUTHKEY, str):
    AUTHKEY = bytes(AUTHKEY)
parser = argparse.ArgumentParser()
parser.add_argument('startserver', action='store')
args = parser.parse_args()
if args.start:
    server = Server(listen_address=LISTEN_ADDRESS,
                    core={self.keys[2]},
                    authkey=AUTHKEY)
    server.start()
''', '''# The listening address of your server
LISTEN_ADDRESS = ('localhost', 3000)
# Authenfication key to connect to your server
AUTHKEY = None
''', '''# Implement your functions here
# Return any pickable value to client
''')

        self.pkg = path / self.mod
        self.paths = (path / '.'.join([self.keys[0], self.ext]),
                      self.pkg / '.'.join([self.keys[1], self.ext]),
                      self.pkg / '.'.join([self.keys[2], self.ext]),
                      self.pkg / '.'.join([self.keys[3], self.ext]))
        self.msg = "Created package {} in {}".format(self.keys[2],
                                                     self.path.as_posix())

    def deploy(self):
        self.pkg.mkdir()
        for p in self.paths:
            if p is self.paths[0]:
                p.write_text(self.content[0])
            elif p is self.paths[1]:
                p.write_text(self.content[1])
            elif p is self.paths[2]:
                p.write_text(self.content[2])
            else:
                p.touch()
            if not p.exists():
                raise FileNotFoundError(p.as_posix())
        print(self.msg)


def main():
    parser = argparse.ArgumentParser(prog="sockets-framework",
                                     description="Sockets Framework")
    subprasers = parser.add_subparsers(dest='command')
    new = subprasers.add_parser('new', help='Start a new project.')
    new.add_argument('name', type=str, help='The name of a project.')
    new.add_argument('path', type=str, help='The path value.', default=None)
    args = parser.parse_args()
    if args.command == "new":
        if args.path:
            path = pathlib.Path(args.path)
            if not path.exists():
                raise FileNotFoundError(path.as_posix())
        else:
            path = pathlib.Path().cwd() / str(args.name)
            if path.exists():
                raise FileExistsError(path.as_posix())
            path.mkdir()
        structure = Structure(path, args.name)
        structure.deploy()


if __name__ == "__main__":
    main()
