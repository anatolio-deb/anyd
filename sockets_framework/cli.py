import argparse
import pathlib

parser = argparse.ArgumentParser(prog="socket-framework",
                                 description="Socket Framework")
subprasers = parser.add_subparsers(dest='command')
new = subprasers.add_parser('new', help='Start a new project.')
new.add_argument('name', type=str, help='The name of a project.')
new.add_argument('-p',
                 '--path',
                 help='Path for a new project.',
                 type=str,
                 default=None)
args = parser.parse_args()
if args.command == "new":
    if args.path:
        path = pathlib.Path(args.path)
        if not path.exists():
            raise FileNotFoundError(path.as_posix())
    else:
        path = pathlib.Path().cwd() / str(args.name)
        if path.exists():
            raise FileExistsError(path.as_posix())
        path.mkdir()
    pkg = path / 'core'
    pkg.mkdir()
    ext = 'py'
    keys = ('manage', 'settings', str(args.name).replace('-', '_'), '__init__')
    structure = (path / '.'.join([keys[0], ext]),
                 pkg / '.'.join([keys[1], ext]),
                 pkg / '.'.join([keys[2], ext]),
                 pkg / '.'.join([keys[3], ext]))
    for p in structure:
        if p is structure[0]:
            p.write_text(f'''# Do not edit this file
# This file was automatically generated by Sockets Framework
import argparse
from core import {keys[2]}
from sockets_framework.core import Server
from core.settings import LISTEN_ADDRESS, AUTHKEY
if isinstance(AUTHKEY, str):
    AUTHKEY = bytes(AUTHKEY)
parser = argparse.ArgumentParser()
parser.add_argument('startserver', action='store')
args = parser.parse_args()
if args.start:
    server = Server(listen_address=LISTEN_ADDRESS,
                    core={keys[2]},
                    authkey=AUTHKEY)
    server.start()
''')
        elif p is structure[1]:
            p.write_text('''# The listening address of your server
LISTEN_ADDRESS = ('localhost', 3000)
# Authenfication key to connect to your server
AUTHKEY = None
''')
        elif p is structure[2]:
            p.write_text('''# Implement your functions here
# Return any pickable value to client
''')
        else:
            p.touch()
    print("Created package {} in {}".format(structure[1],
                                            path.relative_to(path).as_posix()))
